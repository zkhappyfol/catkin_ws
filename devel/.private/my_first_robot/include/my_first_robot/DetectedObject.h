// Generated by gencpp from file my_first_robot/DetectedObject.msg
// DO NOT EDIT!


#ifndef MY_FIRST_ROBOT_MESSAGE_DETECTEDOBJECT_H
#define MY_FIRST_ROBOT_MESSAGE_DETECTEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_first_robot
{
template <class ContainerAllocator>
struct DetectedObject_
{
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
    : color()
    , pixel_x(0)
    , pixel_y(0)
    , area(0.0)  {
    }
  DetectedObject_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , pixel_x(0)
    , pixel_y(0)
    , area(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;

   typedef int32_t _pixel_x_type;
  _pixel_x_type pixel_x;

   typedef int32_t _pixel_y_type;
  _pixel_y_type pixel_y;

   typedef float _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::my_first_robot::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_first_robot::DetectedObject_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObject_

typedef ::my_first_robot::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::my_first_robot::DetectedObject > DetectedObjectPtr;
typedef boost::shared_ptr< ::my_first_robot::DetectedObject const> DetectedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_first_robot::DetectedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_first_robot::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_first_robot::DetectedObject_<ContainerAllocator1> & lhs, const ::my_first_robot::DetectedObject_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.pixel_x == rhs.pixel_x &&
    lhs.pixel_y == rhs.pixel_y &&
    lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_first_robot::DetectedObject_<ContainerAllocator1> & lhs, const ::my_first_robot::DetectedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_first_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_first_robot::DetectedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_first_robot::DetectedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_first_robot::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_first_robot::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_first_robot::DetectedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_first_robot::DetectedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_first_robot::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e11067cb68b62a3f0e378a2a08e38707";
  }

  static const char* value(const ::my_first_robot::DetectedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe11067cb68b62a3fULL;
  static const uint64_t static_value2 = 0x0e378a2a08e38707ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_first_robot::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_first_robot/DetectedObject";
  }

  static const char* value(const ::my_first_robot::DetectedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_first_robot::DetectedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color\n"
"int32 pixel_x\n"
"int32 pixel_y\n"
"float32 area\n"
;
  }

  static const char* value(const ::my_first_robot::DetectedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_first_robot::DetectedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.pixel_x);
      stream.next(m.pixel_y);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_first_robot::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_first_robot::DetectedObject_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pixel_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pixel_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pixel_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pixel_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "area: ";
    Printer<float>::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_FIRST_ROBOT_MESSAGE_DETECTEDOBJECT_H
